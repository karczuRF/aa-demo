/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  WhitelistPaymaster,
  WhitelistPaymasterInterface,
} from "../../../../contracts/paymasters/WhitelistPaymaster/WhitelistPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAlchemyEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "onBehlafOf",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "Accepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "WhitelistedSenderAddressAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "WhitelistedSenderAddressRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "WhitelistedTargetAddressAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "WhitelistedTargetAddressRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IAlchemyEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isWhitelistedSender",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "isWhitelistedTarget",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "senderWhitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAlchemyEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "targetWhitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "requiredPreFund",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "whitelistSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "whitelistTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001ad638038062001ad6833981810160405281019062000037919062000376565b818180600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000af5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a69190620003ce565b60405180910390fd5b620000c081620000dc60201b60201c565b50620000d282620001a060201b60201c565b50505050620003eb565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001b0620001f460201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620002046200029660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200022a6200029e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200029457620002566200029660201b60201c565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016200028b9190620003ce565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f982620002cc565b9050919050565b60006200030d82620002ec565b9050919050565b6200031f8162000300565b81146200032b57600080fd5b50565b6000815190506200033f8162000314565b92915050565b6200035081620002ec565b81146200035c57600080fd5b50565b600081519050620003708162000345565b92915050565b6000806040838503121562000390576200038f620002c7565b5b6000620003a0858286016200032e565b9250506020620003b3858286016200035f565b9150509250929050565b620003c881620002ec565b82525050565b6000602082019050620003e56000830184620003bd565b92915050565b6116db80620003fb6000396000f3fe6080604052600436106101145760003560e01c80638da5cb5b116100a0578063c23a5cea11610064578063c23a5cea1461037a578063c399ec88146103a3578063d0e30db0146103ce578063f2fde38b146103d8578063f465c77e1461040157610114565b80638da5cb5b146102a7578063907caa00146102d2578063a9a234091461030f578063b0d691fe14610338578063bb9fe6bf1461036357610114565b80632f10a6c6116100e75780632f10a6c6146101c4578063584465f2146101ed578063715018a6146102165780638222f07d1461022d578063858437b01461026a57610114565b80630396cb60146101195780631b9e2fad146101355780631cfda9fa14610172578063205c28781461019b575b600080fd5b610133600480360381019061012e9190610ed2565b61043f565b005b34801561014157600080fd5b5061015c60048036038101906101579190610f5d565b6104d8565b6040516101699190610fa5565b60405180910390f35b34801561017e57600080fd5b5061019960048036038101906101949190610f5d565b61052e565b005b3480156101a757600080fd5b506101c260048036038101906101bd9190611034565b6105c8565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610f5d565b610663565b005b3480156101f957600080fd5b50610214600480360381019061020f91906110b2565b6106fd565b005b34801561022257600080fd5b5061022b610749565b005b34801561023957600080fd5b50610254600480360381019061024f9190610f5d565b61075d565b6040516102619190610fa5565b60405180910390f35b34801561027657600080fd5b50610291600480360381019061028c9190610f5d565b61077d565b60405161029e9190610fa5565b60405180910390f35b3480156102b357600080fd5b506102bc61079d565b6040516102c991906110ee565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f49190610f5d565b6107c6565b6040516103069190610fa5565b60405180910390f35b34801561031b57600080fd5b5061033660048036038101906103319190611193565b61081c565b005b34801561034457600080fd5b5061034d610836565b60405161035a9190611266565b60405180910390f35b34801561036f57600080fd5b5061037861085c565b005b34801561038657600080fd5b506103a1600480360381019061039c9190611281565b6108e8565b005b3480156103af57600080fd5b506103b8610980565b6040516103c591906112bd565b60405180910390f35b6103d6610a23565b005b3480156103e457600080fd5b506103ff60048036038101906103fa9190610f5d565b610ab3565b005b34801561040d57600080fd5b5061042860048036038101906104239190611333565b610b39565b604051610436929190611432565b60405180910390f35b610447610ca2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b81526004016104a39190611471565b6000604051808303818588803b1580156104bc57600080fd5b505af11580156104d0573d6000803e3d6000fd5b505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610536610ca2565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fb247c6bc9b15399c4e26c64254ec9e9a0d897aaa8360bc962845e2ee079d2cd5816040516105bd91906110ee565b60405180910390a150565b6105d0610ca2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b815260040161062d92919061149b565b600060405180830381600087803b15801561064757600080fd5b505af115801561065b573d6000803e3d6000fd5b505050505050565b61066b610ca2565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fb65748ca52f895b457808c4dfa30c1cb1c28ca296d55794426b00c7a5360b916816040516106f291906110ee565b60405180910390a150565b610705610ca2565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610751610ca2565b61075b6000610d29565b565b60026020528060005260406000206000915054906101000a900460ff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610824610ded565b61083084848484610e49565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610864610ca2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b50505050565b6108f0610ca2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b815260040161094b91906114c4565b600060405180830381600087803b15801561096557600080fd5b505af1158015610979573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109dd91906110ee565b602060405180830381865afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e91906114f4565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b8152600401610a7f91906110ee565b6000604051808303818588803b158015610a9857600080fd5b505af1158015610aac573d6000803e3d6000fd5b5050505050565b610abb610ca2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b2d5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610b2491906110ee565b60405180910390fd5b610b3681610d29565b50565b6060600080856000016020810190610b519190610f5d565b73ffffffffffffffffffffffffffffffffffffffff163b11610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f9061157e565b60405180910390fd5b60026000866000016020810190610bbf9190610f5d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d906115ea565b60405180910390fd5b600067ffffffffffffffff811115610c6157610c6061160a565b5b6040519080825280601f01601f191660200182016040528015610c935781602001600182028036833780820191505090505b50600091509150935093915050565b610caa610e84565b73ffffffffffffffffffffffffffffffffffffffff16610cc861079d565b73ffffffffffffffffffffffffffffffffffffffff1614610d2757610ceb610e84565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d1e91906110ee565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e4757600080fd5b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611685565b60405180910390fd5b600033905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b610eaf81610e96565b8114610eba57600080fd5b50565b600081359050610ecc81610ea6565b92915050565b600060208284031215610ee857610ee7610e8c565b5b6000610ef684828501610ebd565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f2a82610eff565b9050919050565b610f3a81610f1f565b8114610f4557600080fd5b50565b600081359050610f5781610f31565b92915050565b600060208284031215610f7357610f72610e8c565b5b6000610f8184828501610f48565b91505092915050565b60008115159050919050565b610f9f81610f8a565b82525050565b6000602082019050610fba6000830184610f96565b92915050565b6000610fcb82610eff565b9050919050565b610fdb81610fc0565b8114610fe657600080fd5b50565b600081359050610ff881610fd2565b92915050565b6000819050919050565b61101181610ffe565b811461101c57600080fd5b50565b60008135905061102e81611008565b92915050565b6000806040838503121561104b5761104a610e8c565b5b600061105985828601610fe9565b925050602061106a8582860161101f565b9150509250929050565b600061107f82610f1f565b9050919050565b61108f81611074565b811461109a57600080fd5b50565b6000813590506110ac81611086565b92915050565b6000602082840312156110c8576110c7610e8c565b5b60006110d68482850161109d565b91505092915050565b6110e881610f1f565b82525050565b600060208201905061110360008301846110df565b92915050565b6003811061111657600080fd5b50565b60008135905061112881611109565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111535761115261112e565b5b8235905067ffffffffffffffff8111156111705761116f611133565b5b60208301915083600182028301111561118c5761118b611138565b5b9250929050565b600080600080606085870312156111ad576111ac610e8c565b5b60006111bb87828801611119565b945050602085013567ffffffffffffffff8111156111dc576111db610e91565b5b6111e88782880161113d565b935093505060406111fb8782880161101f565b91505092959194509250565b6000819050919050565b600061122c61122761122284610eff565b611207565b610eff565b9050919050565b600061123e82611211565b9050919050565b600061125082611233565b9050919050565b61126081611245565b82525050565b600060208201905061127b6000830184611257565b92915050565b60006020828403121561129757611296610e8c565b5b60006112a584828501610fe9565b91505092915050565b6112b781610ffe565b82525050565b60006020820190506112d260008301846112ae565b92915050565b600080fd5b600061016082840312156112f4576112f36112d8565b5b81905092915050565b6000819050919050565b611310816112fd565b811461131b57600080fd5b50565b60008135905061132d81611307565b92915050565b60008060006060848603121561134c5761134b610e8c565b5b600084013567ffffffffffffffff81111561136a57611369610e91565b5b611376868287016112dd565b93505060206113878682870161131e565b92505060406113988682870161101f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156113dc5780820151818401526020810190506113c1565b60008484015250505050565b6000601f19601f8301169050919050565b6000611404826113a2565b61140e81856113ad565b935061141e8185602086016113be565b611427816113e8565b840191505092915050565b6000604082019050818103600083015261144c81856113f9565b905061145b60208301846112ae565b9392505050565b61146b81610e96565b82525050565b60006020820190506114866000830184611462565b92915050565b61149581610fc0565b82525050565b60006040820190506114b0600083018561148c565b6114bd60208301846112ae565b9392505050565b60006020820190506114d9600083018461148c565b92915050565b6000815190506114ee81611008565b92915050565b60006020828403121561150a57611509610e8c565b5b6000611518848285016114df565b91505092915050565b600082825260208201905092915050565b7f53656e646572206e6f7420657869737465640000000000000000000000000000600082015250565b6000611568601283611521565b915061157382611532565b602082019050919050565b600060208201905081810360008301526115978161155b565b9050919050565b7f53656e646572206973206e6f742077686974656c697374656400000000000000600082015250565b60006115d4601983611521565b91506115df8261159e565b602082019050919050565b60006020820190508181036000830152611603816115c7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b600061166f600d83611521565b915061167a82611639565b602082019050919050565b6000602082019050818103600083015261169e81611662565b905091905056fea2646970667358221220e241bd842273bc33277bf072d36ac4c8950a071a84cb7fb4021958f069870fc164736f6c63430008140033";

type WhitelistPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WhitelistPaymaster__factory extends ContractFactory {
  constructor(...args: WhitelistPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    entryPoint: AddressLike,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(entryPoint, _owner, overrides || {});
  }
  override deploy(
    entryPoint: AddressLike,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(entryPoint, _owner, overrides || {}) as Promise<
      WhitelistPaymaster & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): WhitelistPaymaster__factory {
    return super.connect(runner) as WhitelistPaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistPaymasterInterface {
    return new Interface(_abi) as WhitelistPaymasterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WhitelistPaymaster {
    return new Contract(address, _abi, runner) as unknown as WhitelistPaymaster;
  }
}
