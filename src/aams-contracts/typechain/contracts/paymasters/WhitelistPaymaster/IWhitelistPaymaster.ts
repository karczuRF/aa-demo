/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IWhitelistPaymasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "isWhitelistedSender"
      | "isWhitelistedTarget"
      | "whitelistSender"
      | "whitelistTarget"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Accepted"
      | "WhitelistedSenderAddressAdded"
      | "WhitelistedSenderAddressRemoved"
      | "WhitelistedTargetAddressAdded"
      | "WhitelistedTargetAddressRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "isWhitelistedSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedTarget",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistTarget",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isWhitelistedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTarget",
    data: BytesLike
  ): Result;
}

export namespace AcceptedEvent {
  export type InputTuple = [
    onBehlafOf: AddressLike,
    to: AddressLike,
    gas: BigNumberish
  ];
  export type OutputTuple = [onBehlafOf: string, to: string, gas: bigint];
  export interface OutputObject {
    onBehlafOf: string;
    to: string;
    gas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedSenderAddressAddedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedSenderAddressRemovedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedTargetAddressAddedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedTargetAddressRemovedEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWhitelistPaymaster extends BaseContract {
  connect(runner?: ContractRunner | null): IWhitelistPaymaster;
  waitForDeployment(): Promise<this>;

  interface: IWhitelistPaymasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isWhitelistedSender: TypedContractMethod<
    [sender: AddressLike],
    [boolean],
    "view"
  >;

  isWhitelistedTarget: TypedContractMethod<
    [target: AddressLike],
    [boolean],
    "view"
  >;

  whitelistSender: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistTarget: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isWhitelistedSender"
  ): TypedContractMethod<[sender: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelistedTarget"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistSender"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistTarget"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Accepted"
  ): TypedContractEvent<
    AcceptedEvent.InputTuple,
    AcceptedEvent.OutputTuple,
    AcceptedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedSenderAddressAdded"
  ): TypedContractEvent<
    WhitelistedSenderAddressAddedEvent.InputTuple,
    WhitelistedSenderAddressAddedEvent.OutputTuple,
    WhitelistedSenderAddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedSenderAddressRemoved"
  ): TypedContractEvent<
    WhitelistedSenderAddressRemovedEvent.InputTuple,
    WhitelistedSenderAddressRemovedEvent.OutputTuple,
    WhitelistedSenderAddressRemovedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedTargetAddressAdded"
  ): TypedContractEvent<
    WhitelistedTargetAddressAddedEvent.InputTuple,
    WhitelistedTargetAddressAddedEvent.OutputTuple,
    WhitelistedTargetAddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedTargetAddressRemoved"
  ): TypedContractEvent<
    WhitelistedTargetAddressRemovedEvent.InputTuple,
    WhitelistedTargetAddressRemovedEvent.OutputTuple,
    WhitelistedTargetAddressRemovedEvent.OutputObject
  >;

  filters: {
    "Accepted(address,address,uint256)": TypedContractEvent<
      AcceptedEvent.InputTuple,
      AcceptedEvent.OutputTuple,
      AcceptedEvent.OutputObject
    >;
    Accepted: TypedContractEvent<
      AcceptedEvent.InputTuple,
      AcceptedEvent.OutputTuple,
      AcceptedEvent.OutputObject
    >;

    "WhitelistedSenderAddressAdded(address)": TypedContractEvent<
      WhitelistedSenderAddressAddedEvent.InputTuple,
      WhitelistedSenderAddressAddedEvent.OutputTuple,
      WhitelistedSenderAddressAddedEvent.OutputObject
    >;
    WhitelistedSenderAddressAdded: TypedContractEvent<
      WhitelistedSenderAddressAddedEvent.InputTuple,
      WhitelistedSenderAddressAddedEvent.OutputTuple,
      WhitelistedSenderAddressAddedEvent.OutputObject
    >;

    "WhitelistedSenderAddressRemoved(address)": TypedContractEvent<
      WhitelistedSenderAddressRemovedEvent.InputTuple,
      WhitelistedSenderAddressRemovedEvent.OutputTuple,
      WhitelistedSenderAddressRemovedEvent.OutputObject
    >;
    WhitelistedSenderAddressRemoved: TypedContractEvent<
      WhitelistedSenderAddressRemovedEvent.InputTuple,
      WhitelistedSenderAddressRemovedEvent.OutputTuple,
      WhitelistedSenderAddressRemovedEvent.OutputObject
    >;

    "WhitelistedTargetAddressAdded(address)": TypedContractEvent<
      WhitelistedTargetAddressAddedEvent.InputTuple,
      WhitelistedTargetAddressAddedEvent.OutputTuple,
      WhitelistedTargetAddressAddedEvent.OutputObject
    >;
    WhitelistedTargetAddressAdded: TypedContractEvent<
      WhitelistedTargetAddressAddedEvent.InputTuple,
      WhitelistedTargetAddressAddedEvent.OutputTuple,
      WhitelistedTargetAddressAddedEvent.OutputObject
    >;

    "WhitelistedTargetAddressRemoved(address)": TypedContractEvent<
      WhitelistedTargetAddressRemovedEvent.InputTuple,
      WhitelistedTargetAddressRemovedEvent.OutputTuple,
      WhitelistedTargetAddressRemovedEvent.OutputObject
    >;
    WhitelistedTargetAddressRemoved: TypedContractEvent<
      WhitelistedTargetAddressRemovedEvent.InputTuple,
      WhitelistedTargetAddressRemovedEvent.OutputTuple,
      WhitelistedTargetAddressRemovedEvent.OutputObject
    >;
  };
}
